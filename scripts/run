#!/bin/sh

set -eu

# Usage:
#   error MESSAGE
error()
{
	echo "::error::$1"
}

# Usage:
#   end_group
end_group()
{
	echo "::endgroup::"
}

# Usage:
#   start_group GROUP_NAME
start_group()
{
	echo "::group::$1"
}

# Usage:
#   check_path_prefix PATH PREFIX
check_path_prefix()
{
	real_prefix=$(realpath "$2")
	case "$(realpath --canonicalize-missing -- "$1")" in
	"$real_prefix" | "$real_prefix/"*)
		return 0
		;;
	esac

	return 1
}

clean_up()
{
	rm --force --recursive -- "${build_dir-}"
}

build_dir=$(mktemp --directory --tmpdir="${RUNNER_TEMP-}" build-deb-action-XXXXXX) || exit 1
trap clean_up EXIT INT HUP TERM

env_file=$build_dir/env
extra_repo_keys_file=$build_dir/build-deb-action.asc
extra_repo_key_files_file=$build_dir/extra_repo_key_files
gitconfig_file=$build_dir/gitconfig

INPUT_ARTIFACTS_DIR=${INPUT_ARTIFACTS_DIR:-.}
if ! check_path_prefix "$INPUT_ARTIFACTS_DIR" "$GITHUB_WORKSPACE"; then
	error "artifacts-dir is not in GITHUB_WORKSPACE"
	exit 2
fi

INPUT_SOURCE_DIR=${INPUT_SOURCE_DIR:-.}
if ! check_path_prefix "$INPUT_SOURCE_DIR" "$GITHUB_WORKSPACE"; then
	error "source-dir is not in GITHUB_WORKSPACE"
	exit 2
fi

touch "$extra_repo_key_files_file"
if [ "$INPUT_EXTRA_REPO_KEYS" ]; then
	printf '%s\n' "$INPUT_EXTRA_REPO_KEYS" >"$extra_repo_keys_file"

	while read -r extra_repo_key_file; do
		[ "$extra_repo_key_file" ] || continue

		if [ ! -f "$extra_repo_key_file" ]; then
			if [ -s "$extra_repo_key_files_file" ]; then
				error "extra-repo-keys cannot contain both ASCII-armored keys and key file paths"
				exit 2
			fi

			# Looks like (an) ASCII-armored key(s)
			break
		fi

		if ! check_path_prefix "$extra_repo_key_file" "$GITHUB_WORKSPACE"; then
			error "A path to a key file in extra-repo-keys is not in GITHUB_WORKSPACE"
			exit 2
		fi

		printf '%s\n' "$extra_repo_key_file" >>"$extra_repo_key_files_file"
	done <"$extra_repo_keys_file"

	if [ ! -s "$extra_repo_key_files_file" ]; then
		printf '/github/build/%s\n' "${extra_repo_keys_file##*/}" >"$extra_repo_key_files_file"
	fi
fi

if [ -f "$INPUT_DOCKER_IMAGE" ]; then
	if ! check_path_prefix "$INPUT_DOCKER_IMAGE" "$GITHUB_WORKSPACE"; then
		error "docker-image is the path of a Dockerfile but it is not in GITHUB_WORKSPACE"
		exit 2
	fi

	start_group "Building container image"
	image_id_file=$build_dir/image_id
	docker build \
		--file="$INPUT_DOCKER_IMAGE" \
		--iidfile="$image_id_file" \
		-- "$GITHUB_WORKSPACE/$(dirname -- "$INPUT_DOCKER_IMAGE")"
	read -r INPUT_DOCKER_IMAGE <"$image_id_file" || :
	end_group
fi

start_group "Starting build container"
# Docker does not like variable values containing newlines in an --env-file, we
# will pass them separately:
env \
	--unset=INPUT_BEFORE_BUILD_HOOK \
	--unset=INPUT_EXTRA_REPO_KEYS \
	--unset=INPUT_EXTRA_REPOS \
	--unset=INPUT_EXTRA_APT_PREFERENCES \
	--unset=INPUT_SETUP_HOOK \
	>"$env_file"

# shellcheck disable=SC2086
container_id=$(
	docker run \
		$INPUT_EXTRA_DOCKER_ARGS \
		--detach \
		--env-file="$env_file" \
		--env=GITHUB_ACTION_PATH=/github/action \
		--env=GITHUB_WORKSPACE=/github/workspace \
		--env=INPUT_EXTRA_REPOS \
		--env=INPUT_EXTRA_APT_PREFERENCES \
		--mount="type=bind,src=${GITHUB_ACTION_PATH},dst=/github/action,ro" \
		--mount="type=bind,src=${build_dir},dst=/github/build" \
		--mount="type=bind,src=${GITHUB_WORKSPACE},dst=/github/workspace" \
		--rm \
		--workdir=/github/workspace \
		-- \
		"$INPUT_DOCKER_IMAGE" \
		tail -f /dev/null
)
end_group

start_group "Setting up build container"
while read -r extra_repo_key_file; do
	docker exec "$container_id" install \
		--mode=644 \
		--target-directory=/etc/apt/trusted.gpg.d \
		"$extra_repo_key_file"
done <"$extra_repo_key_files_file"

# git is always available here outside the build container, in the environment
# of a run step.

# To simplify the usage of git from a hook, we mark all directories as safe.
# Otherwise git would complain, since a hook is run as root but the workspace
# repository belongs to a different user.
git config --file="$gitconfig_file" safe.directory '*'

docker exec "$container_id" install \
	--mode=644 \
	--no-target-directory \
	/github/build/gitconfig \
	/etc/gitconfig
end_group

if [ -n "$INPUT_SETUP_HOOK" ]; then
	start_group "Executing setup hook"
	docker exec "$container_id" /bin/sh -c "$INPUT_SETUP_HOOK"
	end_group
fi

start_group "Installing build dependencies"
docker exec "$container_id" /github/action/scripts/install_build_deps
end_group

if [ -n "$INPUT_BEFORE_BUILD_HOOK" ]; then
	start_group "Executing before-build hook"
	docker exec "$container_id" /bin/sh -c "$INPUT_BEFORE_BUILD_HOOK"
	end_group
fi

start_group "Building package"
docker exec "$container_id" /github/action/scripts/build_packages
end_group

start_group "Moving artifacts"
docker exec "$container_id" /github/action/scripts/move_artifacts
end_group

start_group "Stopping build container"
docker stop --time=1 "$container_id" >/dev/null
end_group
