#!/bin/sh

set -eu

APT_CONF_FILE=/etc/apt/apt.conf.d/50build-deb-action

export DEBIAN_FRONTEND=noninteractive

cat > "$APT_CONF_FILE" <<-EOF
	APT::Get::Assume-Yes "yes";
	APT::Install-Recommends "no";
	Acquire::Languages "none";
	quiet "yes";
EOF

# Adapted from pbuilder's support for cross-compilation:
if [ -n "$INPUT_HOST_ARCH" ]; then
	dpkg --add-architecture "$INPUT_HOST_ARCH"
	INPUT_EXTRA_BUILD_DEPS="$INPUT_EXTRA_BUILD_DEPS crossbuild-essential-$INPUT_HOST_ARCH libc-dev:$INPUT_HOST_ARCH"
	printf 'APT::Get::Host-Architecture "%s";\n' "$INPUT_HOST_ARCH" >> "$APT_CONF_FILE"
fi

# debconf has priority “required” and is indirectly depended on by some
# essential packages. It is reasonably safe to blindly assume it is installed.
printf "man-db man-db/auto-update boolean false\n" | debconf-set-selections

#!/bin/bash

# shellcheck disable=SC2154
if [ -f "/github/$apt_config_dir/build-deb-action.asc" ]; then
    apt-get update
	# ca-certificates are needed otherwise most third-party repos are going to failed the verification
	# issuing errors such as 404 and "Certificate verification failed: The certificate is NOT trusted"
	# or similar.
    apt-get install gpg ca-certificates
    gpg --dearmor -o /usr/share/keyrings/build-deb-action.gpg /github/"$apt_config_dir"/build-deb-action.asc
fi

if [ -f "/github/$apt_config_dir/build-deb-action.sources" ]; then
    cp /github/"$apt_config_dir"/build-deb-action.sources /etc/apt/sources.list.d/build-deb-action.sources
fi

if [ -f "/github/$apt_config_dir/build-deb-action.pref" ]; then
    cp /github/"$apt_config_dir"/build-deb-action.pref /etc/apt/preferences.d/build-deb-action.pref
fi

# amd64 ubuntu image come, for some reason, with archives.ubuntu.com as
# package feeds instead of ports.ubuntu.com. This is bad because archives
# only has x86 and amd64 packages, so we can't cross-build with an ubuntu
# container. The workaround is adding ports manually here.
# shellcheck disable=SC1091
. /etc/os-release

if [ "$ID" = "ubuntu" ] && [ -n "$INPUT_HOST_ARCH" ]; then
	# completly rebuild the sources.list files from scratch, specifying the arch
	rm -rf /etc/apt/sources.list
    echo "deb [arch=$INPUT_HOST_ARCH] http://ports.ubuntu.com/ubuntu-ports/ ${VERSION_CODENAME} main restricted universe" | tee "/etc/apt/sources.list.d/$INPUT_HOST_ARCH.list"
    echo "deb [arch=$INPUT_HOST_ARCH] http://ports.ubuntu.com/ubuntu-ports/ ${VERSION_CODENAME}-updates main restricted universe" | tee -a "/etc/apt/sources.list.d/$INPUT_HOST_ARCH.list"
    echo "deb [arch=$INPUT_HOST_ARCH] http://ports.ubuntu.com/ubuntu-ports/ ${VERSION_CODENAME}-backports main restricted universe" | tee -a "/etc/apt/sources.list.d/$INPUT_HOST_ARCH.list"
    echo "deb [arch=$INPUT_HOST_ARCH] http://ports.ubuntu.com/ubuntu-ports/ ${VERSION_CODENAME}-security main restricted universe" | tee -a "/etc/apt/sources.list.d/$INPUT_HOST_ARCH.list"

	echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ ${VERSION_CODENAME} universe" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-updates universe" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ ${VERSION_CODENAME} multiverse" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-updates multiverse" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-backports main restricted universe multiverse" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-security main restricted" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-security universe" | tee "/etc/apt/sources.list.d/archive.list"
	echo "deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu/ ${VERSION_CODENAME}-security multiverse" | tee "/etc/apt/sources.list.d/archive.list"
 
fi

apt-get update
apt-cache policy

# shellcheck disable=SC2086
apt-get build-dep $INPUT_APT_OPTS -- "./$INPUT_SOURCE_DIR"

# In theory, explicitly installing dpkg-dev would not be necessary. `apt-get
# build-dep` will *always* install build-essential which depends on dpkg-dev.
# But let’s be explicit here.
# shellcheck disable=SC2086
apt-get install $INPUT_APT_OPTS -- dpkg-dev libdpkg-perl $INPUT_EXTRA_BUILD_DEPS
